package sendkeys

import (
	"encoding/json"
	"fmt"
)

type KeyMap map[rune]KeyCode

func (k KeyMap) String() string {
	data, _ := json.MarshalIndent(k, "", " ")
	return string(data)
}

// https://chromium.googlesource.com/chromium/chromium/+/18a10fbde23dd76184d9be2a892c628b5cae3da1/ui/keyboard/resources/elements/kb-key-codes.html
// I use this for my KVM switch
func KeyMap_US_EN101() KeyMap {
	return KeyMap{
		'1': SimpleKeyCode(0x31),
		'2': SimpleKeyCode(0x32),
		'3': SimpleKeyCode(0x33),
		'4': SimpleKeyCode(0x34),
		'5': SimpleKeyCode(0x35),
		'6': SimpleKeyCode(0x36),
		'7': SimpleKeyCode(0x37),
		'8': SimpleKeyCode(0x38),
		'9': SimpleKeyCode(0x39),
		'0': SimpleKeyCode(0x30),

		'a': SimpleKeyCode(0x41),
		'b': SimpleKeyCode(0x42),
		'c': SimpleKeyCode(0x43),
		'd': SimpleKeyCode(0x44),
		'e': SimpleKeyCode(0x45),
		'f': SimpleKeyCode(0x46),
		'g': SimpleKeyCode(0x47),
		'h': SimpleKeyCode(0x48),
		'i': SimpleKeyCode(0x49),
		'j': SimpleKeyCode(0x4A),
		'k': SimpleKeyCode(0x4B),
		'l': SimpleKeyCode(0x4C),
		'n': SimpleKeyCode(0x4D),
		'm': SimpleKeyCode(0x4E),
		'o': SimpleKeyCode(0x4F),
		'p': SimpleKeyCode(0x50),
		'q': SimpleKeyCode(0x51),
		'r': SimpleKeyCode(0x52),
		's': SimpleKeyCode(0x53),
		't': SimpleKeyCode(0x54),
		'u': SimpleKeyCode(0x55),
		'v': SimpleKeyCode(0x56),
		'w': SimpleKeyCode(0x57),
		'x': SimpleKeyCode(0x58),
		'y': SimpleKeyCode(0x59),
		'z': SimpleKeyCode(0x5A),

		'A': ShiftKeyCode(0x41),
		'B': ShiftKeyCode(0x42),
		'C': ShiftKeyCode(0x43),
		'D': ShiftKeyCode(0x44),
		'E': ShiftKeyCode(0x45),
		'F': ShiftKeyCode(0x46),
		'G': ShiftKeyCode(0x47),
		'H': ShiftKeyCode(0x48),
		'I': ShiftKeyCode(0x49),
		'J': ShiftKeyCode(0x4A),
		'K': ShiftKeyCode(0x4B),
		'L': ShiftKeyCode(0x4C),
		'N': ShiftKeyCode(0x4D),
		'M': ShiftKeyCode(0x4E),
		'O': ShiftKeyCode(0x4F),
		'P': ShiftKeyCode(0x50),
		'Q': ShiftKeyCode(0x51),
		'R': ShiftKeyCode(0x52),
		'S': ShiftKeyCode(0x53),
		'T': ShiftKeyCode(0x54),
		'U': ShiftKeyCode(0x55),
		'V': ShiftKeyCode(0x56),
		'W': ShiftKeyCode(0x57),
		'X': ShiftKeyCode(0x58),
		'Y': ShiftKeyCode(0x59),
		'Z': ShiftKeyCode(0x5A),

		'-':  SimpleKeyCode(0xBD),
		'_':  ShiftKeyCode(0xBD),
		'=':  SimpleKeyCode(0xBB),
		'+':  ShiftKeyCode(0xBB),
		'[':  SimpleKeyCode(0xDB),
		'{':  ShiftKeyCode(0xDB),
		']':  SimpleKeyCode(0xDD),
		'}':  ShiftKeyCode(0xDD),
		'\'': SimpleKeyCode(0xDE),
		'"':  ShiftKeyCode(0xDE),
		'`':  SimpleKeyCode(0xC0),
		'~':  ShiftKeyCode(0xC0),
		'\\': SimpleKeyCode(0xDC),
		'|':  ShiftKeyCode(0xDC),
		',':  SimpleKeyCode(0xBC),
		'<':  ShiftKeyCode(0xBC),
		'.':  SimpleKeyCode(0xBE),
		'>':  ShiftKeyCode(0xBE),
		'/':  SimpleKeyCode(0xBF),
		'?':  ShiftKeyCode(0xBF),
		'\n': SimpleKeyCode(0x0D),
		' ':  SimpleKeyCode(0x20),
		'!':  ShiftKeyCode(0x31),
		'@':  ShiftKeyCode(0x32),
		'#':  ShiftKeyCode(0x33),
		'$':  ShiftKeyCode(0x34),
		'%':  ShiftKeyCode(0x35),
		'^':  ShiftKeyCode(0x36),
		'&':  ShiftKeyCode(0x37),
		'*':  ShiftKeyCode(0x38),
		'(':  ShiftKeyCode(0x39),
		')':  ShiftKeyCode(0x30),
		';':  SimpleKeyCode(0xBA),
		':':  ShiftKeyCode(0xBA),

		//'\b': SimpleKeyCode(0x08),
	}
}

// https://gist.github.com/rickyzhang82/8581a762c9f9fc6ddb8390872552c250
func KeyMapLinuxQuartz() KeyMap {
	return KeyMap{
		'1': SimpleKeyCode(2),
		'2': SimpleKeyCode(3),
		'3': SimpleKeyCode(4),
		'4': SimpleKeyCode(5),
		'5': SimpleKeyCode(6),
		'6': SimpleKeyCode(7),
		'7': SimpleKeyCode(8),
		'8': SimpleKeyCode(9),
		'9': SimpleKeyCode(10),
		'0': SimpleKeyCode(11),

		'a': SimpleKeyCode(30),
		'b': SimpleKeyCode(48),
		'c': SimpleKeyCode(46),
		'd': SimpleKeyCode(32),
		'e': SimpleKeyCode(18),
		'f': SimpleKeyCode(33),
		'g': SimpleKeyCode(34),
		'h': SimpleKeyCode(35),
		'i': SimpleKeyCode(23),
		'j': SimpleKeyCode(36),
		'k': SimpleKeyCode(37),
		'l': SimpleKeyCode(38),
		'm': SimpleKeyCode(50),
		'n': SimpleKeyCode(49),
		'o': SimpleKeyCode(24),
		'p': SimpleKeyCode(25),
		'q': SimpleKeyCode(16),
		'r': SimpleKeyCode(19),
		's': SimpleKeyCode(31),
		't': SimpleKeyCode(20),
		'u': SimpleKeyCode(22),
		'v': SimpleKeyCode(47),
		'w': SimpleKeyCode(17),
		'x': SimpleKeyCode(45),
		'y': SimpleKeyCode(21),
		'z': SimpleKeyCode(44),

		'A': ShiftKeyCode(30),
		'B': ShiftKeyCode(48),
		'C': ShiftKeyCode(46),
		'D': ShiftKeyCode(32),
		'E': ShiftKeyCode(18),
		'F': ShiftKeyCode(33),
		'G': ShiftKeyCode(34),
		'H': ShiftKeyCode(35),
		'I': ShiftKeyCode(23),
		'J': ShiftKeyCode(36),
		'K': ShiftKeyCode(37),
		'L': ShiftKeyCode(38),
		'M': ShiftKeyCode(50),
		'N': ShiftKeyCode(49),
		'O': ShiftKeyCode(24),
		'P': ShiftKeyCode(25),
		'Q': ShiftKeyCode(16),
		'R': ShiftKeyCode(19),
		'S': ShiftKeyCode(31),
		'T': ShiftKeyCode(20),
		'U': ShiftKeyCode(22),
		'V': ShiftKeyCode(47),
		'W': ShiftKeyCode(17),
		'X': ShiftKeyCode(45),
		'Y': ShiftKeyCode(21),
		'Z': ShiftKeyCode(44),

		'-':  SimpleKeyCode(12),
		'_':  ShiftKeyCode(12),
		'=':  SimpleKeyCode(13),
		'+':  ShiftKeyCode(13),
		'[':  SimpleKeyCode(26),
		'{':  ShiftKeyCode(26),
		']':  SimpleKeyCode(27),
		'}':  ShiftKeyCode(27),
		'\'': SimpleKeyCode(40),
		'"':  ShiftKeyCode(40),
		'`':  SimpleKeyCode(41),
		'~':  ShiftKeyCode(41),
		'\\': SimpleKeyCode(43),
		'|':  ShiftKeyCode(43),
		',':  SimpleKeyCode(51),
		'<':  ShiftKeyCode(51),
		'.':  SimpleKeyCode(52),
		'>':  ShiftKeyCode(52),
		'/':  SimpleKeyCode(53),
		'?':  ShiftKeyCode(53),
		'\n': SimpleKeyCode(28),
		' ':  SimpleKeyCode(57),
		'!':  ShiftKeyCode(2),
		'@':  ShiftKeyCode(3),
		'#':  ShiftKeyCode(4),
		'$':  ShiftKeyCode(5),
		'%':  ShiftKeyCode(6),
		'^':  ShiftKeyCode(7),
		'&':  ShiftKeyCode(8),
		'*':  ShiftKeyCode(9),
		'(':  ShiftKeyCode(10),
		')':  ShiftKeyCode(11),
		';':  SimpleKeyCode(39),
		':':  ShiftKeyCode(39),
	}
}

func KeyMapDarwin_DE_QWERTZ() KeyMap {
	return KeyMap{
		'1': SimpleKeyCode(18),
		'2': SimpleKeyCode(19),
		'3': SimpleKeyCode(20),
		'4': SimpleKeyCode(21),
		'5': SimpleKeyCode(23),
		'6': SimpleKeyCode(22),
		'7': SimpleKeyCode(26),
		'8': SimpleKeyCode(28),
		'9': SimpleKeyCode(25),
		'0': SimpleKeyCode(29),

		'a': SimpleKeyCode(0),
		'b': SimpleKeyCode(11),
		'c': SimpleKeyCode(8),
		'd': SimpleKeyCode(2),
		'e': SimpleKeyCode(14),
		'f': SimpleKeyCode(3),
		'g': SimpleKeyCode(5),
		'h': SimpleKeyCode(4),
		'i': SimpleKeyCode(34),
		'j': SimpleKeyCode(38),
		'k': SimpleKeyCode(40),
		'l': SimpleKeyCode(37),
		'm': SimpleKeyCode(46),
		'n': SimpleKeyCode(45),
		'o': SimpleKeyCode(31),
		'p': SimpleKeyCode(35),
		'q': SimpleKeyCode(12),
		'r': SimpleKeyCode(15),
		's': SimpleKeyCode(1),
		't': SimpleKeyCode(17),
		'u': SimpleKeyCode(32),
		'v': SimpleKeyCode(9),
		'w': SimpleKeyCode(13),
		'x': SimpleKeyCode(7),
		'y': SimpleKeyCode(6),
		'z': SimpleKeyCode(16),

		'Q': ShiftKeyCode(12),
		'W': ShiftKeyCode(13),
		'E': ShiftKeyCode(14),
		'R': ShiftKeyCode(15),
		'T': ShiftKeyCode(17),
		'Y': ShiftKeyCode(6),
		'U': ShiftKeyCode(32),
		'I': ShiftKeyCode(34),
		'O': ShiftKeyCode(31),
		'P': ShiftKeyCode(35),
		'A': ShiftKeyCode(0),
		'S': ShiftKeyCode(1),
		'D': ShiftKeyCode(2),
		'F': ShiftKeyCode(3),
		'G': ShiftKeyCode(5),
		'H': ShiftKeyCode(4),
		'J': ShiftKeyCode(38),
		'K': ShiftKeyCode(40),
		'L': ShiftKeyCode(37),
		'Z': ShiftKeyCode(16),
		'X': ShiftKeyCode(7),
		'C': ShiftKeyCode(8),
		'V': ShiftKeyCode(9),
		'B': ShiftKeyCode(11),
		'N': ShiftKeyCode(45),
		'M': ShiftKeyCode(46),

		'-':  SimpleKeyCode(44),
		'_':  ShiftKeyCode(44),
		'=':  ShiftKeyCode(29),
		'+':  SimpleKeyCode(30),
		'[':  AltKeyCode(23),
		'{':  AltKeyCode(28),
		']':  AltKeyCode(22),
		'}':  AltKeyCode(25),
		'\'': ShiftKeyCode(42),
		'"':  ShiftKeyCode(19),
		'`':  ShiftKeyCode(24),
		//	'Â´':  SimpleKeyCode(24),
		'~':  AltKeyCode(45),
		'\\': AltShiftKeyCode(26),
		'|':  AltKeyCode(26),
		',':  SimpleKeyCode(43),
		'<':  SimpleKeyCode(50),
		'.':  SimpleKeyCode(47),
		'>':  ShiftKeyCode(50),
		'/':  ShiftKeyCode(26),
		'?':  ShiftKeyCode(27),
		'\n': SimpleKeyCode(36),
		' ':  SimpleKeyCode(49),
		'!':  ShiftKeyCode(18),
		'@':  AltKeyCode(37),
		'#':  SimpleKeyCode(42),
		'$':  ShiftKeyCode(21),
		'%':  ShiftKeyCode(23),
		'^':  SimpleKeyCode(10),
		'&':  ShiftKeyCode(22),
		'*':  ShiftKeyCode(30),
		'(':  ShiftKeyCode(28),
		')':  ShiftKeyCode(25),
		';':  ShiftKeyCode(43),
		':':  ShiftKeyCode(47),
	}
}

func (kb *KBWrap) strToKeys(str string) (keys []KeyCode) {
	for _, r := range str {
		code, ok := kb.keyMap[r]
		if ok {
			keys = append(keys, code)
		} else {
			kb.errors = append(
				kb.errors,
				fmt.Errorf("%w: %v", ErrKeyMappingNotFound, r),
			)
		}
	}
	return
}
